---
title: "Take Home Exercise 2"
title-block-banner: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
editor: visual
author: Yen Yun Hsuan
date: "28 May 2023"
execute: 
  warning: false
---

# Background

This is [Mini-Challenge 2](https://vast-challenge.github.io/2023/MC2.html) of VAST Challenge 2023.

The country of Oceanus has sought FishEye International's help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing.\
As part of the collaboration, FishEye's analysts received **import/export data** for Oceanus' marine and fishing industries. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it.\
FishEye analysts found that **node-link diagrams** gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph.

# Task

FishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. FishEye wants your help to use visual analytics to identify **temporal patterns** for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the **types of business relationship patterns** you find. Limit your response to 600 words and 6 images.

# Data preparation

## Installing and launching R packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts,jsonlite,gtsummary,
               tinygraph)
```

## Import data

```{r}
MC2 <- fromJSON("data/mc2_challenge_graph.json")
```

At the root-level, MC2 is a dictionary with graph-level properties specified as keys ( directed , mulitgraph , graph ). The nodes and links keys provide a dictionary of the nodes and links.

Below extract data frame from MC2 list as tibble table.

### Nodes

Rename id as label, and create a new column "id".\
Use select to reorder column sequences, with id column in the first.

+-------------+----------------------------------------------------------------+
| Col name    | Description                                                    |
+=============+================================================================+
| label       | Name of the company that originated (or received) the shipment |
+-------------+----------------------------------------------------------------+
| shpcountry  | Country the company most often associated with when shipping   |
+-------------+----------------------------------------------------------------+
| rcvcountry  | Country the company most often associated with when receiving  |
+-------------+----------------------------------------------------------------+

```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>% 
  rename(label = id) %>% 
  mutate(id = row_number()) %>% 
  select(id,label,shpcountry, rcvcountry) 
glimpse(MC2_nodes)
colSums(is.na(MC2_nodes))
```

### Edges

Use select to drop three "value-" columns with lots of NA, and drop "dataset" which is no need.

```{r}
MC2_edge <- as_tibble(MC2$links) 

colSums(is.na(MC2_edge))
```

```{r}
MC2_edges <- MC2_edge%>% 
  select(-valueofgoodsusd, -dataset,-valueofgoods_omu, -volumeteu  )

glimpse(MC2_edges)
```

::: callout-caution
## Notice

The arrivaldate is treated as "Character" data type instead of date data type. Need to change the data type back to "Date"" data type.
:::

```{r}
MC2_edges <- MC2_edges %>% 
  mutate(arrival_date  = ymd(arrivaldate )) %>% 
# Also create a column Year as factor format
  mutate(Year = as.factor(year(arrivaldate))) %>% 
  mutate(Month = as.factor(month(arrivaldate)))

glimpse(MC2_edges)
```

+--------------------+-----------------------------------------------------------------------------------------------------------------------+
| **Col name**       | **Description**                                                                                                       |
+--------------------+-----------------------------------------------------------------------------------------------------------------------+
| arrival_date       | Date the shipment arrived at port                                                                                     |
+--------------------+-----------------------------------------------------------------------------------------------------------------------+
| hscode             | Harmonized System code (commodity code) for the shipment                                                              |
+--------------------+-----------------------------------------------------------------------------------------------------------------------+
| *valueofgoods_omu* | *Customs-declared value of the total shipment*                                                                        |
+--------------------+-----------------------------------------------------------------------------------------------------------------------+
| *volumeteu*        | *The volume of the shipment in 'Twenty-foot equivalent units', roughly\                                               |
|                    | how many 20-foot standard containers would be required.*                                                              |
+--------------------+-----------------------------------------------------------------------------------------------------------------------+
| weightkg           | The weight of the shipment in kilograms                                                                               |
+--------------------+-----------------------------------------------------------------------------------------------------------------------+
| Source/ target     | Some shipper(source) and receiver names/countries(target) was anonymized, so some are represented by numerical names. |
+--------------------+-----------------------------------------------------------------------------------------------------------------------+

Join with MC2_nodes to get source ID (rename as from) and target ID (rename as to).\
Rename source as sourcelabel, and target as targetlabel.\
Filter out sourcelabel, targetlabel that is not in MC2_nodes.

```{r}
MC2_edge_result <- merge(MC2_edges, MC2_nodes, by.x = "source", 
                by.y = "label", all.x = TRUE) %>% 
  rename(sourcelabel = source) %>% 
   rename(from = id) %>% 
  select(-shpcountry,rcvcountry) %>% 
  filter(sourcelabel %in% MC2_nodes$label) %>% 
  left_join(MC2_nodes, by = c( "target" ="label" )) %>% 
  rename(targetlabel = target) %>% 
   rename(to = id) %>% 
  select(-rcvcountry.x,-rcvcountry.y,-shpcountry)%>%
  filter(targetlabel %in% MC2_nodes$label)

glimpse(MC2_edge_result)

```

## Wrangling attributes

```{r}
#group by year and hscode, remain all columns

# MC2_edges_aggregate <- MC2_edges %>% 
#   group_by(source, target, Year, hscode) %>% 
#    mutate(number = row_number()) %>% 
#   select(source, target, arrival_date,Year, Month, hscode, weightkg)
# 
# MC2_edges_aggregate
```

```{r}
MC2_edges_aggregated <- MC2_edge_result %>% 
  group_by(from, to, Year) %>% 
   summarise(Weight = n(), .groups = "drop")
# filter the top 1% frequency records
  # filter(Weight >= quantile(Weight, 0.99))

glimpse(MC2_edges_aggregated)
```

Drop columns (shpcountry,rcvcountry) with NA value in MC2_nodes

```{r}
MC2_node_drop <- MC2_nodes %>% 
  select(-shpcountry, -rcvcountry) 

glimpse(MC2_node_drop)

```

## Build tidygraph model

Build an tidygraph's network graph data.frame, arrange Year in edges by ascending order.

```{r}
MC2_graph <- tbl_graph(nodes = MC2_node_drop,
                       edges = MC2_edges_aggregated)

MC2_graph
```

```{r}
MC2_edges_weight <- MC2_edges_aggregated %>% 
  filter(Weight >= 300)

edge_nodes <- unique(c(MC2_edges_weight$from, 
                       MC2_edges_weight$to))

# Filter nodes based on IDs
MC2_node_filter <- MC2_node_drop %>%
  filter(id %in% edge_nodes)
```

```{r}
graph <- igraph::graph_from_data_frame(MC2_edges_weight, vertices = MC2_node_filter) %>% as_tbl_graph()
graph
```

# Visualization

```{r}
g <- ggraph(graph,
            layout = "nicely") +
  geom_edge_link(aes(color = Year,
                     width = Weight)) +
  scale_edge_width(range = c(0.1, 5))+
  geom_node_point(aes())

g+ theme_graph()
```

```{r}
g <- graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight, color = Year)) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(
            size=betweenness_centrality))
g + theme_graph()
```

```{r}
g <- graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```
