---
title: "Hands-on_Ex06"
format: html
editor: visual
---

# Creating Ternary Plot with R

## Import package

```{r}
pacman::p_load('plotly', 'tidyverse','ggstatsplot')
```

## Dowload ggtern

-   [**ggtern**](http://www.ggtern.com/), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plot

```{r}
library(ggtern)
```

## Import data

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv")
glimpse(pop_data)
```

Derive three new measures, namely: young, active, and old

```{r}
agpop_mutated <- pop_data %>% 
  mutate(Year = as.character(Year)) %>% 
# Unique values in AG seperate to distinct columns, fill with corresponding Population value
  spread(AG, Population) %>% 
#calculate the sum of values in columns 4 to 8 (AG columns) for each row
  mutate(YOUNG = rowSums(.[4:8])) %>% 
  mutate(ACTIVE  = rowSums(.[9:16])) %>% 
  mutate(OLD  = rowSums(.[17:21])) %>% 
  mutate(TOTAL  = rowSums(.[22:24])) %>% 
  filter(Year == 2018) %>% 
  filter(TOTAL > 0)
  
glimpse(agpop_mutated)
```

## Static graph with ggtern

```{r}
ggtern(data = agpop_mutated,aes(x= YOUNG, y = ACTIVE, z = OLD))+
  geom_point()+
  labs(title="Population structure, 2018") +
  theme_rgbw()
```

## Interactive graph with plotly

```{r}
label <- function(txt) { 
  # Defines a function named "label" that takes one argument "txt"
  list( 
    text = txt,
    x = 0.1, y = 1, 
    # Sets the x and y coordinates of the label (x:0 left, y:0 bottom)
    xref = "papaer", yref = "paper", 
    # Sets label reference to "paper" (whole plot area)
    align = "center", # Sets the alignment of the label text to the center
    font = list(family = "serif", size = 15, color = "white"),
    # Sets the font family to "serif"
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  ) #background/border color
}

axis <- function(txt){
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  ) # Sets the tick format to display percentages with no decimal places
}

ternaryAxes <- list(
  aaxis = axis("Young"), # Configures the "a" axis with the title "Young"
  baxis = axis("Active"),
  caxis = axis("OLD")
)

plot_ly(
  agpop_mutated,
  a = ~YOUNG,
  b = ~ACTIVE,
  c = ~OLD,
  color = I("black"),
  type = "scatterternary"
) %>% 
  layout(
    annotations = label("Ternary Markers"),
    ternary = ternaryAxes 
    # Assigns the "ternaryAxes" configuration to the ternary plot
  )
```

# Visual Correlation Analysis 

## Data preparation

### Import package

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

### Import data

```{r}
wine <- read_csv("data/wine_quality.csv")
glimpse(wine)
```

## Correlation plot

### Correlation matrix

```{r}
pairs(wine[,2:12])
# selects columns 2 to 11
```

Show the lower half of the correlation matrix (a correlation matrix is symmetric)

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

Display upper half.

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

## Show correlation coefficients

```{r}
#| warning: false
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
  usr <- par("usr")     # Retrieves the current coordinate system from the graphics parameters
  on.exit(par(usr))     # Sets the coordinate system back to the original after the function exits
  par(usr = c(0, 1, 0, 1))  # Sets the coordinate system to cover the full plotting region
  r <- abs(cor(x, y, use="complete.obs"))  # Computes the correlation coefficient between x and y
  txt <- format(c(r, 0.123456789), digits=digits)[1]  # Formats the correlation coefficient with the desired number of digits
  txt <- paste(prefix, txt, sep="")  # Prepends the prefix to the correlation coefficient text
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)  # Determines the size of the correlation text based on its width
  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)  # Displays the correlation text in the center of the plot
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)

```

## Use ggcorrmat

### Basic plot

```{r}
# ggcorrmat(
#   data = wine, 
#   cor.vars = 1:11,
#   ggcorrplot.args = list(outline.color = "black", 
#                          hc.order = TRUE,
#                          tl.cex = 10), # sets the font size of the text labels to be 10
#   title = "Correlogram for wine dataset",
#   subtitle = "Four pairs are not significant at p < 0.05"
# )
# 
# ggplot.component = list(
#   theme(text = element_text(size = 5),
#         axis.text.x = element_text (size = 8),
#         axis.text.y = element_text (size = 8))
# )
```

### Multiple plot

```{r}
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 1,
                         tl.srt = 45), #rotate the numerical values by 45 degree
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

## Corrplot package

### Compute the correlation

```{r}
wine.cor <- cor(wine[,1:11])
```

Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients.
Darker colours indicate relatively stronger linear relationship between the paired variables.

```{r}
corrplot(wine.cor)
```

### Customize the design

The default is \"full\" which display full matrix, and circle shape.

Can change by method and type.

diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour.

```{r}
corrplot(wine.cor,
         method = "ellipse",
         type = "lower",
         diag = FALSE,
         tl.col = "black")
```

### Mixed layout

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt", #text labels should be positioned at the left-top corner of each cell
               diag = "l",
               tl.col = "black")
```

### Combining corrgram with the significant test

Compute the p-values and confidence interval for each pair of variables

```{r}
wine.sig = cor.mtest(wine.cor, conf.level = 0.95)
```

```{r}
corrplot(wine.cor,
         method ="number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         p.mat = wine.sig$p,
         sig.level = 0.95)
```

### Reorder corrgram

"AOE" is for the angular order of the eigenvectors.

```{r}
corrplot.mixed(wine.cor,
               lower ="ellipse",
               upper ="number",
               tl.pos = "lt", #left-top corner
               order ="AOE",
               tl.col ="black",
               tl.cex = 0.8) #adjust word size

```

Using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3) #specific cells or regions that will be highlighted depend on the correlation matrix and the highest absolute correlation values
```
